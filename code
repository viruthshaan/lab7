#include <iostream>
using namespace std;

struct node {
  int key;
  struct node *left, *right;
};
//Returns the node with minimum key value
struct node* minimum(struct node* node){
    struct node* NowNode = node;
    while (NowNode->left != NULL){
        NowNode = NowNode -> left;
    }
    return NowNode;
}    


// Inorder traversal
void traverseInOrder(struct node *root) {
   if(root == NULL){
       return;
   }
    else {
        traverseInOrder(root -> left);
        cout << root -> key << " ";
        traverseInOrder(root -> right);
    }
}

struct node *insertNode(struct node *node, int key) {
  if (node == NULL) {
    // create a new node if the current node is null
    node = (struct node*) malloc(sizeof(struct node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    return node;
  }

  if (key <= node->key) {
    // recursively insert the key into the left subtree
    node->left = insertNode(node->left, key);
  } else {
    // recursively insert the key into the right subtree
    node->right = insertNode(node->right, key);
  }

  return node; // return the root node
}
// Deleting a node
struct node *deleteNode(struct node *root, int key) {
if (root ==NULL){
        return root;
    }
    if (key < root->key){
        root->left = deleteNode(root->left,key);
    }
    else if (key > root-> key){
        root -> right = deleteNode(root->right,key);
    
    }
    else{
        //no child
        if (root -> left == NULL and root -> right == NULL){
            return NULL;
        }
        
        //only right Child
        else if (root -> left == NULL){
            struct node* temp = root -> right;
            free(root);
            return temp;
        }
        
        //only left child
        else if (root -> right == NULL){
            struct node* temp = root -> left;
            free(root);
            return temp;
        }
        
        //Node with two children
        else{
            struct node* temp = minimum(root->right);
            root -> key = temp -> key;
            root -> right = deleteNode(root->right, temp -> key);
        }
 
    }
    return root;
}


// Driver code
int main() {
  struct node *root = NULL;

  int operation;
  int operand;
  cin >> operation;

  while (operation != -1) {
    switch(operation) {
      case 1: // insert
        cin >> operand;
        root = insertNode(root, operand);
        cin >> operation;
        break;
      case 2: // delete
        cin >> operand;
        root = deleteNode(root, operand);
        cin >> operation;
        break;
      default:
        cout << "Invalid Operator!\n";
        return 0;
    }
  }
  
  traverseInOrder(root);
}
